# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import bigfs_pb2 as bigfs__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in bigfs_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GatewayServiceStub(object):
    """O cliente fala apenas com o Gateway. ListFiles agora opera em um namespace plano.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadFile = channel.stream_unary(
                '/bigfs.GatewayService/UploadFile',
                request_serializer=bigfs__pb2.ChunkUploadRequest.SerializeToString,
                response_deserializer=bigfs__pb2.SimpleResponse.FromString,
                _registered_method=True)
        self.GetDownloadMap = channel.unary_unary(
                '/bigfs.GatewayService/GetDownloadMap',
                request_serializer=bigfs__pb2.FileRequest.SerializeToString,
                response_deserializer=bigfs__pb2.FileLocationResponse.FromString,
                _registered_method=True)
        self.ListFiles = channel.unary_unary(
                '/bigfs.GatewayService/ListFiles',
                request_serializer=bigfs__pb2.PathRequest.SerializeToString,
                response_deserializer=bigfs__pb2.FileListResponse.FromString,
                _registered_method=True)


class GatewayServiceServicer(object):
    """O cliente fala apenas com o Gateway. ListFiles agora opera em um namespace plano.
    """

    def UploadFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDownloadMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GatewayServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadFile': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=bigfs__pb2.ChunkUploadRequest.FromString,
                    response_serializer=bigfs__pb2.SimpleResponse.SerializeToString,
            ),
            'GetDownloadMap': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDownloadMap,
                    request_deserializer=bigfs__pb2.FileRequest.FromString,
                    response_serializer=bigfs__pb2.FileLocationResponse.SerializeToString,
            ),
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=bigfs__pb2.PathRequest.FromString,
                    response_serializer=bigfs__pb2.FileListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bigfs.GatewayService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('bigfs.GatewayService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GatewayService(object):
    """O cliente fala apenas com o Gateway. ListFiles agora opera em um namespace plano.
    """

    @staticmethod
    def UploadFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/bigfs.GatewayService/UploadFile',
            bigfs__pb2.ChunkUploadRequest.SerializeToString,
            bigfs__pb2.SimpleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDownloadMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bigfs.GatewayService/GetDownloadMap',
            bigfs__pb2.FileRequest.SerializeToString,
            bigfs__pb2.FileLocationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bigfs.GatewayService/ListFiles',
            bigfs__pb2.PathRequest.SerializeToString,
            bigfs__pb2.FileListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MetadataServiceStub(object):
    """O Gateway fala com os serviços de backend.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterNode = channel.unary_unary(
                '/bigfs.MetadataService/RegisterNode',
                request_serializer=bigfs__pb2.NodeInfo.SerializeToString,
                response_deserializer=bigfs__pb2.SimpleResponse.FromString,
                _registered_method=True)
        self.GetFileLocation = channel.unary_unary(
                '/bigfs.MetadataService/GetFileLocation',
                request_serializer=bigfs__pb2.FileRequest.SerializeToString,
                response_deserializer=bigfs__pb2.FileLocationResponse.FromString,
                _registered_method=True)
        self.GetWritePlan = channel.unary_unary(
                '/bigfs.MetadataService/GetWritePlan',
                request_serializer=bigfs__pb2.FileRequest.SerializeToString,
                response_deserializer=bigfs__pb2.FileLocationResponse.FromString,
                _registered_method=True)
        self.ListFiles = channel.unary_unary(
                '/bigfs.MetadataService/ListFiles',
                request_serializer=bigfs__pb2.PathRequest.SerializeToString,
                response_deserializer=bigfs__pb2.FileListResponse.FromString,
                _registered_method=True)


class MetadataServiceServicer(object):
    """O Gateway fala com os serviços de backend.
    """

    def RegisterNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFileLocation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWritePlan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetadataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterNode': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterNode,
                    request_deserializer=bigfs__pb2.NodeInfo.FromString,
                    response_serializer=bigfs__pb2.SimpleResponse.SerializeToString,
            ),
            'GetFileLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFileLocation,
                    request_deserializer=bigfs__pb2.FileRequest.FromString,
                    response_serializer=bigfs__pb2.FileLocationResponse.SerializeToString,
            ),
            'GetWritePlan': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWritePlan,
                    request_deserializer=bigfs__pb2.FileRequest.FromString,
                    response_serializer=bigfs__pb2.FileLocationResponse.SerializeToString,
            ),
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=bigfs__pb2.PathRequest.FromString,
                    response_serializer=bigfs__pb2.FileListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bigfs.MetadataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('bigfs.MetadataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MetadataService(object):
    """O Gateway fala com os serviços de backend.
    """

    @staticmethod
    def RegisterNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bigfs.MetadataService/RegisterNode',
            bigfs__pb2.NodeInfo.SerializeToString,
            bigfs__pb2.SimpleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFileLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bigfs.MetadataService/GetFileLocation',
            bigfs__pb2.FileRequest.SerializeToString,
            bigfs__pb2.FileLocationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWritePlan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bigfs.MetadataService/GetWritePlan',
            bigfs__pb2.FileRequest.SerializeToString,
            bigfs__pb2.FileLocationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bigfs.MetadataService/ListFiles',
            bigfs__pb2.PathRequest.SerializeToString,
            bigfs__pb2.FileListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StorageServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreChunk = channel.unary_unary(
                '/bigfs.StorageService/StoreChunk',
                request_serializer=bigfs__pb2.Chunk.SerializeToString,
                response_deserializer=bigfs__pb2.SimpleResponse.FromString,
                _registered_method=True)
        self.RetrieveChunk = channel.unary_unary(
                '/bigfs.StorageService/RetrieveChunk',
                request_serializer=bigfs__pb2.ChunkRequest.SerializeToString,
                response_deserializer=bigfs__pb2.Chunk.FromString,
                _registered_method=True)


class StorageServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StoreChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StorageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StoreChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreChunk,
                    request_deserializer=bigfs__pb2.Chunk.FromString,
                    response_serializer=bigfs__pb2.SimpleResponse.SerializeToString,
            ),
            'RetrieveChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveChunk,
                    request_deserializer=bigfs__pb2.ChunkRequest.FromString,
                    response_serializer=bigfs__pb2.Chunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bigfs.StorageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('bigfs.StorageService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StorageService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StoreChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bigfs.StorageService/StoreChunk',
            bigfs__pb2.Chunk.SerializeToString,
            bigfs__pb2.SimpleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RetrieveChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/bigfs.StorageService/RetrieveChunk',
            bigfs__pb2.ChunkRequest.SerializeToString,
            bigfs__pb2.Chunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
